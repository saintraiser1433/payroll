"use client"

import { useState, useEffect } from "react"
import { useSession } from "next-auth/react"
import { Plus, Search, MoreHorizontal, Edit, UserX, UserCheck, Eye, Users, Building2, Calendar, DollarSign } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { DashboardLayout } from "@/components/dashboard-layout"
import { useToast } from "@/hooks/use-toast"
import { ConfirmationDialog } from "@/components/ui/confirmation-dialog"
import { DataTablePagination } from "@/components/ui/data-table-pagination"

interface Employee {
  id: string
  employeeId: string
  firstName: string
  lastName: string
  email: string
  phone?: string
  address?: string
  position: string
  jobDescription?: string
  salaryRate: number
  salaryType: string
  hireDate: string
  profileImage?: string
  isActive: boolean
  department?: {
    id: string
    name: string
  }
  schedule?: {
    id: string
    name: string
  }
}

interface Department {
  id: string
  name: string
}

interface Schedule {
  id: string
  name: string
}

interface PaginationData {
  page: number
  limit: number
  total: number
  pages: number
}

export default function EmployeesPage() {
  const { data: session } = useSession()
  const { toast } = useToast()
  const [employees, setEmployees] = useState<Employee[]>([])
  const [departments, setDepartments] = useState<Department[]>([])
  const [schedules, setSchedules] = useState<Schedule[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedDepartment, setSelectedDepartment] = useState("all")
  const [activeTab, setActiveTab] = useState("active")
  const [pagination, setPagination] = useState<PaginationData>({
    page: 1,
    limit: 10,
    total: 0,
    pages: 0,
  })
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)
  const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null)
  const [viewingEmployee, setViewingEmployee] = useState<Employee | null>(null)
  const [confirmDialog, setConfirmDialog] = useState({
    open: false,
    title: "",
    description: "",
    action: () => {},
  })
  const [formData, setFormData] = useState({
    employeeId: "",
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    address: "",
    position: "",
    jobDescription: "",
    salaryRate: 0,
    salaryType: "HOURLY",
    hireDate: "",
    departmentId: "",
    scheduleId: "",
  })

  const isAdmin = session?.user?.role === "ADMIN"
  const [userDepartment, setUserDepartment] = useState<string | null>(null)

  useEffect(() => {
    if (isAdmin) {
      fetchEmployees()
      fetchDepartments()
      fetchSchedules()
    } else {
      // For non-admin users, check if they are a department head
      checkUserDepartment()
    }
  }, [isAdmin, searchTerm, selectedDepartment, activeTab, pagination.page, pagination.limit])

  const checkUserDepartment = async () => {
    try {
      // Get current user's employee record to check if they are a department head
      const response = await fetch('/api/employees')
      if (response.ok) {
        const data = await response.json()
        const currentUserEmployee = data.employees.find((emp: any) => emp.user?.email === session?.user?.email)
        
        if (currentUserEmployee?.department?.id) {
          setUserDepartment(currentUserEmployee.department.id)
          // Filter employees to only show those in the same department
          fetchEmployeesForDepartment(currentUserEmployee.department.id)
        }
      }
    } catch (error) {
      console.error('Error checking user department:', error)
    }
  }

  const fetchEmployeesForDepartment = async (departmentId: string) => {
    try {
      const params = new URLSearchParams()
      if (searchTerm) params.append('search', searchTerm)
      params.append('departmentId', departmentId)
      params.append('isActive', 'true')
      params.append('page', pagination.page.toString())
      params.append('limit', pagination.limit.toString())
      
      const response = await fetch(`/api/employees?${params}`)
      if (!response.ok) throw new Error('Failed to fetch employees')
      
      const data = await response.json()
      setEmployees(data.employees || [])
      setPagination(data.pagination || pagination)
    } catch (error) {
      console.error('Error fetching employees:', error)
      toast({
        title: "Error",
        description: "Failed to fetch employees",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  const fetchEmployees = async () => {
    try {
      const params = new URLSearchParams()
      if (searchTerm) params.append('search', searchTerm)
      if (selectedDepartment && selectedDepartment !== 'all') params.append('departmentId', selectedDepartment)
      params.append('isActive', activeTab === 'active' ? 'true' : 'false')
      params.append('page', pagination.page.toString())
      params.append('limit', pagination.limit.toString())
      
      const response = await fetch(`/api/employees?${params}`)
      if (!response.ok) throw new Error('Failed to fetch employees')
      
      const data = await response.json()
      setEmployees(data.employees || [])
      setPagination(data.pagination || pagination)
    } catch (error) {
      console.error('Error fetching employees:', error)
      toast({
        title: "Error",
        description: "Failed to fetch employees",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  const fetchDepartments = async () => {
    try {
      const response = await fetch('/api/departments')
      if (!response.ok) throw new Error('Failed to fetch departments')
      
      const data = await response.json()
      setDepartments(data)
    } catch (error) {
      console.error('Error fetching departments:', error)
    }
  }

  const fetchSchedules = async () => {
    try {
      // Fetch all schedules without pagination for the dropdown
      const response = await fetch('/api/schedules?limit=100')
      if (!response.ok) throw new Error('Failed to fetch schedules')
      
      const data = await response.json()
      setSchedules(data.schedules || [])
    } catch (error) {
      console.error('Error fetching schedules:', error)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    try {
      const url = editingEmployee ? `/api/employees/${editingEmployee.id}` : '/api/employees'
      const method = editingEmployee ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Failed to save employee')
      }

      toast({
        title: "Success",
        description: `Employee ${editingEmployee ? 'updated' : 'created'} successfully`,
      })

      setIsDialogOpen(false)
      resetForm()
      fetchEmployees()
    } catch (error) {
      console.error('Error saving employee:', error)
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to save employee",
        variant: "destructive",
      })
    }
  }

  const handleViewDetails = (employee: Employee) => {
    setViewingEmployee(employee)
    setIsViewDialogOpen(true)
  }

  const handleEdit = (employee: Employee) => {
    setEditingEmployee(employee)
    setFormData({
      employeeId: employee.employeeId,
      firstName: employee.firstName,
      lastName: employee.lastName,
      email: employee.email,
      phone: employee.phone || "",
      address: employee.address || "",
      position: employee.position,
      jobDescription: employee.jobDescription || "",
      salaryRate: employee.salaryRate,
      salaryType: employee.salaryType,
      hireDate: employee.hireDate.split('T')[0],
      departmentId: employee.department?.id || "",
      scheduleId: employee.schedule?.id || "",
    })
    setIsDialogOpen(true)
  }

  const handleDeactivate = (employee: Employee) => {
    setConfirmDialog({
      open: true,
      title: "Deactivate Employee",
      description: `Are you sure you want to deactivate ${employee.firstName} ${employee.lastName}? They will be moved to the inactive list and won't be able to access the system.`,
      action: () => performDeactivation(employee.id),
    })
  }

  const handleReactivate = (employee: Employee) => {
    setConfirmDialog({
      open: true,
      title: "Reactivate Employee",
      description: `Are you sure you want to reactivate ${employee.firstName} ${employee.lastName}? They will be moved back to the active list and regain system access.`,
      action: () => performReactivation(employee.id),
    })
  }

  const performDeactivation = async (id: string) => {
    try {
      const response = await fetch(`/api/employees/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isActive: false }),
      })

      if (!response.ok) throw new Error('Failed to deactivate employee')

      toast({
        title: "Success",
        description: "Employee deactivated successfully",
      })

      fetchEmployees()
    } catch (error) {
      console.error('Error deactivating employee:', error)
      toast({
        title: "Error",
        description: "Failed to deactivate employee",
        variant: "destructive",
      })
    }
  }

  const performReactivation = async (id: string) => {
    try {
      const response = await fetch(`/api/employees/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ isActive: true }),
      })

      if (!response.ok) throw new Error('Failed to reactivate employee')

      toast({
        title: "Success",
        description: "Employee reactivated successfully",
      })

      fetchEmployees()
    } catch (error) {
      console.error('Error reactivating employee:', error)
      toast({
        title: "Error",
        description: "Failed to reactivate employee",
        variant: "destructive",
      })
    }
  }

  const resetForm = () => {
    setFormData({
      employeeId: "",
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      address: "",
      position: "",
      jobDescription: "",
      salaryRate: 0,
      salaryType: "HOURLY",
      hireDate: "",
      departmentId: "",
      scheduleId: "",
    })
    setEditingEmployee(null)
  }

  const handleDialogClose = () => {
    setIsDialogOpen(false)
    resetForm()
  }

  const handlePageChange = (page: number) => {
    setPagination(prev => ({ ...prev, page }))
  }

  const handlePageSizeChange = (pageSize: number) => {
    setPagination(prev => ({ ...prev, limit: pageSize, page: 1 }))
  }

  const handleTabChange = (value: string) => {
    setActiveTab(value)
    setPagination(prev => ({ ...prev, page: 1 }))
  }

  if (!isAdmin && !userDepartment) {
    return (
      <DashboardLayout>
        <div className="flex items-center justify-center h-64">
          <p className="text-muted-foreground">Access denied. Admin or department head privileges required.</p>
        </div>
      </DashboardLayout>
    )
  }

  return (
    <DashboardLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold tracking-tight">Employees</h1>
            <p className="text-muted-foreground">
              {isAdmin 
                ? "Manage your organization's employees" 
                : userDepartment 
                  ? "Manage employees in your department" 
                  : "View employee information"
              }
            </p>
          </div>
          {isAdmin && (
            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
              <DialogTrigger asChild>
                <Button onClick={() => setIsDialogOpen(true)}>
                  <Plus className="mr-2 h-4 w-4" />
                  Add Employee
                </Button>
              </DialogTrigger>
            <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>
                  {editingEmployee ? 'Edit Employee' : 'Add New Employee'}
                </DialogTitle>
                <DialogDescription>
                  {editingEmployee ? 'Update employee information' : 'Create a new employee record'}
                </DialogDescription>
              </DialogHeader>
              <form onSubmit={handleSubmit} className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="employeeId">Employee ID</Label>
                    <Input
                      id="employeeId"
                      value={formData.employeeId}
                      onChange={(e) => setFormData({ ...formData, employeeId: e.target.value })}
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                      required
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="firstName">First Name</Label>
                    <Input
                      id="firstName"
                      value={formData.firstName}
                      onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="lastName">Last Name</Label>
                    <Input
                      id="lastName"
                      value={formData.lastName}
                      onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                      required
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="phone">Phone</Label>
                    <Input
                      id="phone"
                      value={formData.phone}
                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="position">Position</Label>
                    <Input
                      id="position"
                      value={formData.position}
                      onChange={(e) => setFormData({ ...formData, position: e.target.value })}
                      required
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="jobDescription">Job Description</Label>
                  <Textarea
                    id="jobDescription"
                    value={formData.jobDescription}
                    onChange={(e) => setFormData({ ...formData, jobDescription: e.target.value })}
                    placeholder="Describe the employee's responsibilities and duties..."
                    rows={3}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="address">Address</Label>
                  <Textarea
                    id="address"
                    value={formData.address}
                    onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                  />
                </div>

                <div className="grid grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="salaryRate">Salary Rate</Label>
                    <Input
                      id="salaryRate"
                      type="number"
                      step="0.01"
                      value={formData.salaryRate}
                      onChange={(e) => setFormData({ ...formData, salaryRate: parseFloat(e.target.value) || 0 })}
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="salaryType">Salary Type</Label>
                    <Select value={formData.salaryType} onValueChange={(value) => setFormData({ ...formData, salaryType: value })}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="HOURLY">Hourly</SelectItem>
                        <SelectItem value="DAILY">Daily</SelectItem>
                        <SelectItem value="MONTHLY">Monthly</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="hireDate">Hire Date</Label>
                    <Input
                      id="hireDate"
                      type="date"
                      value={formData.hireDate}
                      onChange={(e) => setFormData({ ...formData, hireDate: e.target.value })}
                      required
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="department">Department</Label>
                    <Select value={formData.departmentId} onValueChange={(value) => setFormData({ ...formData, departmentId: value })}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select department" />
                      </SelectTrigger>
                      <SelectContent>
                        {departments.map((dept) => (
                          <SelectItem key={dept.id} value={dept.id}>
                            {dept.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="schedule">Schedule</Label>
                    <Select value={formData.scheduleId} onValueChange={(value) => setFormData({ ...formData, scheduleId: value })}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select schedule" />
                      </SelectTrigger>
                      <SelectContent>
                        {schedules.map((schedule) => (
                          <SelectItem key={schedule.id} value={schedule.id}>
                            {schedule.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <DialogFooter>
                  <Button type="button" variant="outline" onClick={handleDialogClose}>
                    Cancel
                  </Button>
                  <Button type="submit">
                    {editingEmployee ? 'Update' : 'Create'} Employee
                  </Button>
                </DialogFooter>
              </form>
            </DialogContent>
          </Dialog>
        )}

        {/* Stats Cards */}
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Active Employees</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{employees.filter(e => e.isActive).length}</div>
              <p className="text-xs text-muted-foreground">
                Currently active
              </p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Departments</CardTitle>
              <Building2 className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{departments.length}</div>
              <p className="text-xs text-muted-foreground">
                Active departments
              </p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Schedules</CardTitle>
              <Calendar className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{schedules.length}</div>
              <p className="text-xs text-muted-foreground">
                Available schedules
              </p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Avg. Salary</CardTitle>
              <DollarSign className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                ₱{employees.filter(e => e.isActive).length > 0 ? (employees.filter(e => e.isActive).reduce((sum, emp) => sum + emp.salaryRate, 0) / employees.filter(e => e.isActive).length).toFixed(0) : '0'}
              </div>
              <p className="text-xs text-muted-foreground">
                Per hour/day/month
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Employee Management */}
        <Card>
          <CardHeader>
            <CardTitle>Employee Management</CardTitle>
            <CardDescription>
              Manage active and inactive employees in your organization
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs value={activeTab} onValueChange={handleTabChange} className="space-y-4">
              <TabsList>
                <TabsTrigger value="active">Active Employees</TabsTrigger>
                <TabsTrigger value="inactive">Inactive Employees</TabsTrigger>
              </TabsList>

              {/* Filters */}
              <div className="flex items-center space-x-4">
                <div className="relative flex-1">
                  <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search employees..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-8"
                  />
                </div>
                {isAdmin && (
                  <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>
                    <SelectTrigger className="w-[200px]">
                      <SelectValue placeholder="Filter by department" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">All Departments</SelectItem>
                      {departments.map((dept) => (
                        <SelectItem key={dept.id} value={dept.id}>
                          {dept.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                )}
              </div>

              <TabsContent value="active" className="space-y-4">
                {loading ? (
                  <div className="flex items-center justify-center h-32">
                    <p className="text-muted-foreground">Loading employees...</p>
                  </div>
                ) : (
                  <>
                    <div className="rounded-md border">
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>Employee</TableHead>
                            <TableHead>ID</TableHead>
                            <TableHead>Position</TableHead>
                            <TableHead>Department</TableHead>
                            <TableHead>Schedule</TableHead>
                            <TableHead>Salary</TableHead>
                            <TableHead className="text-right">Actions</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {employees.length === 0 ? (
                            <TableRow>
                              <TableCell colSpan={7} className="text-center text-muted-foreground">
                                No active employees found
                              </TableCell>
                            </TableRow>
                          ) : (
                            employees.map((employee) => (
                              <TableRow key={employee.id}>
                                <TableCell className="font-medium">
                                  <div className="flex items-center space-x-3">
                                    <Avatar className="h-8 w-8">
                                      <AvatarImage src={employee.profileImage} />
                                      <AvatarFallback>
                                        {employee.firstName[0]}{employee.lastName[0]}
                                      </AvatarFallback>
                                    </Avatar>
                                    <div>
                                      <div className="font-medium">
                                        {employee.firstName} {employee.lastName}
                                      </div>
                                      <div className="text-sm text-muted-foreground">
                                        {employee.email}
                                      </div>
                                    </div>
                                  </div>
                                </TableCell>
                                <TableCell>{employee.employeeId}</TableCell>
                                <TableCell>{employee.position}</TableCell>
                                <TableCell>
                                  {employee.department ? (
                                    <Badge variant="secondary">{employee.department.name}</Badge>
                                  ) : (
                                    <span className="text-muted-foreground">Not assigned</span>
                                  )}
                                </TableCell>
                                <TableCell>
                                  {employee.schedule ? (
                                    <Badge variant="outline">{employee.schedule.name}</Badge>
                                  ) : (
                                    <span className="text-muted-foreground">Not assigned</span>
                                  )}
                                </TableCell>
                                <TableCell>
                                  ₱{employee.salaryRate.toLocaleString()}/{employee.salaryType.toLowerCase()}
                                </TableCell>
                                <TableCell className="text-right">
                                  <DropdownMenu>
                                    <DropdownMenuTrigger asChild>
                                      <Button variant="ghost" className="h-8 w-8 p-0">
                                        <span className="sr-only">Open menu</span>
                                        <MoreHorizontal className="h-4 w-4" />
                                      </Button>
                                    </DropdownMenuTrigger>
                                    <DropdownMenuContent align="end">
                                      <DropdownMenuItem onClick={() => handleViewDetails(employee)}>
                                        <Eye className="mr-2 h-4 w-4" />
                                        View Details
                                      </DropdownMenuItem>
                                      {isAdmin && (
                                        <>
                                          <DropdownMenuItem onClick={() => handleEdit(employee)}>
                                            <Edit className="mr-2 h-4 w-4" />
                                            Edit
                                          </DropdownMenuItem>
                                          <DropdownMenuItem 
                                            onClick={() => handleDeactivate(employee)}
                                            className="text-orange-600"
                                          >
                                            <UserX className="mr-2 h-4 w-4" />
                                            Deactivate
                                          </DropdownMenuItem>
                                        </>
                                      )}
                                    </DropdownMenuContent>
                                  </DropdownMenu>
                                </TableCell>
                              </TableRow>
                            ))
                          )}
                        </TableBody>
                      </Table>
                    </div>
                    <DataTablePagination
                      currentPage={pagination.page}
                      totalPages={pagination.pages}
                      pageSize={pagination.limit}
                      totalItems={pagination.total}
                      onPageChange={handlePageChange}
                      onPageSizeChange={handlePageSizeChange}
                    />
                  </>
                )}
              </TabsContent>

              <TabsContent value="inactive" className="space-y-4">
                {loading ? (
                  <div className="flex items-center justify-center h-32">
                    <p className="text-muted-foreground">Loading employees...</p>
                  </div>
                ) : (
                  <>
                    <div className="rounded-md border">
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>Employee</TableHead>
                            <TableHead>ID</TableHead>
                            <TableHead>Position</TableHead>
                            <TableHead>Department</TableHead>
                            <TableHead>Schedule</TableHead>
                            <TableHead>Salary</TableHead>
                            <TableHead className="text-right">Actions</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {employees.length === 0 ? (
                            <TableRow>
                              <TableCell colSpan={7} className="text-center text-muted-foreground">
                                No inactive employees found
                              </TableCell>
                            </TableRow>
                          ) : (
                            employees.map((employee) => (
                              <TableRow key={employee.id} className="opacity-60">
                                <TableCell className="font-medium">
                                  <div className="flex items-center space-x-3">
                                    <Avatar className="h-8 w-8">
                                      <AvatarImage src={employee.profileImage} />
                                      <AvatarFallback>
                                        {employee.firstName[0]}{employee.lastName[0]}
                                      </AvatarFallback>
                                    </Avatar>
                                    <div>
                                      <div className="font-medium">
                                        {employee.firstName} {employee.lastName}
                                      </div>
                                      <div className="text-sm text-muted-foreground">
                                        {employee.email}
                                      </div>
                                    </div>
                                  </div>
                                </TableCell>
                                <TableCell>{employee.employeeId}</TableCell>
                                <TableCell>{employee.position}</TableCell>
                                <TableCell>
                                  {employee.department ? (
                                    <Badge variant="secondary">{employee.department.name}</Badge>
                                  ) : (
                                    <span className="text-muted-foreground">Not assigned</span>
                                  )}
                                </TableCell>
                                <TableCell>
                                  {employee.schedule ? (
                                    <Badge variant="outline">{employee.schedule.name}</Badge>
                                  ) : (
                                    <span className="text-muted-foreground">Not assigned</span>
                                  )}
                                </TableCell>
                                <TableCell>
                                  ₱{employee.salaryRate.toLocaleString()}/{employee.salaryType.toLowerCase()}
                                </TableCell>
                                <TableCell className="text-right">
                                  <DropdownMenu>
                                    <DropdownMenuTrigger asChild>
                                      <Button variant="ghost" className="h-8 w-8 p-0">
                                        <span className="sr-only">Open menu</span>
                                        <MoreHorizontal className="h-4 w-4" />
                                      </Button>
                                    </DropdownMenuTrigger>
                                    <DropdownMenuContent align="end">
                                      <DropdownMenuItem onClick={() => handleViewDetails(employee)}>
                                        <Eye className="mr-2 h-4 w-4" />
                                        View Details
                                      </DropdownMenuItem>
                                      {isAdmin && (
                                        <>
                                          <DropdownMenuItem onClick={() => handleEdit(employee)}>
                                            <Edit className="mr-2 h-4 w-4" />
                                            Edit
                                          </DropdownMenuItem>
                                          <DropdownMenuItem 
                                            onClick={() => handleReactivate(employee)}
                                            className="text-green-600"
                                          >
                                            <UserCheck className="mr-2 h-4 w-4" />
                                            Reactivate
                                          </DropdownMenuItem>
                                        </>
                                      )}
                                    </DropdownMenuContent>
                                  </DropdownMenu>
                                </TableCell>
                              </TableRow>
                            ))
                          )}
                        </TableBody>
                      </Table>
                    </div>
                    <DataTablePagination
                      currentPage={pagination.page}
                      totalPages={pagination.pages}
                      pageSize={pagination.limit}
                      totalItems={pagination.total}
                      onPageChange={handlePageChange}
                      onPageSizeChange={handlePageSizeChange}
                    />
                  </>
                )}
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>

        {/* View Details Dialog */}
        <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Employee Details</DialogTitle>
              <DialogDescription>
                Complete information for {viewingEmployee?.firstName} {viewingEmployee?.lastName}
              </DialogDescription>
            </DialogHeader>
            {viewingEmployee && (
              <div className="space-y-6">
                <div className="flex items-center space-x-4">
                  <Avatar className="h-16 w-16">
                    <AvatarImage src={viewingEmployee.profileImage} />
                    <AvatarFallback className="text-lg">
                      {viewingEmployee.firstName[0]}{viewingEmployee.lastName[0]}
                    </AvatarFallback>
                  </Avatar>
                  <div>
                    <h3 className="text-lg font-semibold">
                      {viewingEmployee.firstName} {viewingEmployee.lastName}
                    </h3>
                    <p className="text-muted-foreground">{viewingEmployee.position}</p>
                    <Badge variant={viewingEmployee.isActive ? "default" : "secondary"}>
                      {viewingEmployee.isActive ? "Active" : "Inactive"}
                    </Badge>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <Label className="text-sm font-medium text-muted-foreground">Employee ID</Label>
                      <p className="text-sm">{viewingEmployee.employeeId}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-muted-foreground">Email</Label>
                      <p className="text-sm">{viewingEmployee.email}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-muted-foreground">Phone</Label>
                      <p className="text-sm">{viewingEmployee.phone || "Not provided"}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-muted-foreground">Department</Label>
                      <p className="text-sm">{viewingEmployee.department?.name || "Not assigned"}</p>
                    </div>
                  </div>
                  <div className="space-y-4">
                    <div>
                      <Label className="text-sm font-medium text-muted-foreground">Schedule</Label>
                      <p className="text-sm">{viewingEmployee.schedule?.name || "Not assigned"}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-muted-foreground">Salary Rate</Label>
                      <p className="text-sm">₱{viewingEmployee.salaryRate.toLocaleString()}/{viewingEmployee.salaryType.toLowerCase()}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-muted-foreground">Hire Date</Label>
                      <p className="text-sm">{new Date(viewingEmployee.hireDate).toLocaleDateString()}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium text-muted-foreground">Status</Label>
                      <p className="text-sm">{viewingEmployee.isActive ? "Active Employee" : "Inactive Employee"}</p>
                    </div>
                  </div>
                </div>

                {viewingEmployee.address && (
                  <div>
                    <Label className="text-sm font-medium text-muted-foreground">Address</Label>
                    <p className="text-sm">{viewingEmployee.address}</p>
                  </div>
                )}
              </div>
            )}
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsViewDialogOpen(false)}>
                Close
              </Button>
              {viewingEmployee && (
                <Button onClick={() => {
                  setIsViewDialogOpen(false)
                  handleEdit(viewingEmployee)
                }}>
                  Edit Employee
                </Button>
              )}
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Confirmation Dialog */}
        <ConfirmationDialog
          open={confirmDialog.open}
          onOpenChange={(open) => setConfirmDialog(prev => ({ ...prev, open }))}
          title={confirmDialog.title}
          description={confirmDialog.description}
          confirmText={confirmDialog.title.includes("Deactivate") ? "Deactivate" : "Reactivate"}
          variant={confirmDialog.title.includes("Deactivate") ? "destructive" : "default"}
          onConfirm={() => {
            confirmDialog.action()
            setConfirmDialog(prev => ({ ...prev, open: false }))
          }}
        />
      </div>
    </DashboardLayout>
  )
}